import pygal
from pygal.style import LightColorizedStyle

def add_data(chart, data):
    for x in data:
        chart.add(x[0], [{
            'value' : x[1],
            'label' : x[0]
        }] if x[1] is list else x[1])
    return chart

data = [
    ['MDMA', 1321],
    ['Weed', 761],
    ['LSD', 523],
    ['Cocaine', 475],
    ['Amphetamine', 215],
    ['Heroin', 150],
    ['Ketamine', 67],
    ['Opium', 53],
    ['Mescaline', 20]
]
chart = pygal.Bar(style=LightColorizedStyle)
chart.title = 'Total number of listings by drug';
chart = add_data(chart, data)
chart.render_to_file('../total_listings_by_drug.svg')


data = [
    ['MDMA', 33822, 25],
    ['Weed', 28213, 37],
    ['LSD', 12122, 23],
    ['Cocaine', 16591, 34],
    ['Amphetamine', 6251, 29],
    ['Heroin', 3132, 20],
    ['Ketamine', 1504, 22],
    ['Opium', 1256, 23],
    ['Mescaline', 62, 3]
]
#data = [
    #['MDMA', ],
#]
#, 28.06
chart = pygal.Bar(style=LightColorizedStyle)
chart.title = 'Number of Ratings'

#chart.x_labels = map(lambda x : x[0], data)
#for i, x in enumerate(data):
    #value_arr = map(lambda x : {'value' : None, 'label' : data[x][0]}, range(len(data)))
    #value_arr[i]['value'] = x[1]
    #chart.add(x[0], value_arr)

    ##now add the normalized value in the same slot
    #value_arr[i]['value'] = x[2]
    #value_arr[i]['label'] = 'total listings / n ratings'
    #chart.add(x[0], value_arr)
chart = add_data(chart, data)
chart.render_to_file('../ratings_by_drug.svg')

chart = pygal.Dot(style=LightColorizedStyle, show_legend=False)
chart.title = 'Number of Ratings / Number of listings'
chart = add_data(chart, map(lambda x: [ x[0], x[2] ], data))
#chart = add_data(chart, data)
chart.render_to_file('../ratings_by_drug_div.svg')

data = [
   [ '1', [(1, 68.62)] ],
   [ '2', [(2, 99.2)] ],
   [ '3', [(3, 16.32)] ],
   [ '4', [(4, 33.79)] ],
   [ '5', [(5, 99.12)] ],
   [ '6', [(6, 52.53)] ],
   [ '7', [(7, 46.79)] ],
   [ '8', [(8, 28.59)] ],
   [ '9', [(9, 29.01)] ],
   [ '10', [(10, 29.01)] ],
   [ '11', [(11, 38.09)] ],
   [ '12', [(12, 166.71)] ],
   [ '13', [(13, 22.04)] ],
   [ '14', [(14, 161.22)] ],
   [ '15', [(15, 48.79)] ],
   [ '16', [(16, 99.12)] ],
   [ '17', [(17, 33.79)] ],
   [ '18', [(18, 171.44)] ],
   [ '19', [(19, 175.4)] ],
   [ '20', [(20, 57.79)] ],
   [ '21', [(21, 16.42)] ],
   [ '22', [(22, 59.4)] ],
   [ '23', [(23, 99.81)] ],
   [ '24', [(24, 130.67)] ],
   [ '25', [(25, 56.71)] ],
   [ '26', [(26, 85.36)] ],
   [ '27', [(27, 145.24)] ],
   [ '28', [(28, 210.34)] ],
   [ '29', [(29, 121.15)] ],
   [ '30', [(30, 98.91)] ],
   [ '31', [(31, 129.17)] ],
   [ '32', [(32, 59.33)] ],
   [ '33', [(33, 26.27)] ],
   [ '34', [(34, 59.5)] ],
   [ '35', [(35, 47.48)] ],
   [ '36', [(36, 63.93)] ],
   [ '37', [(37, 189.12)] ],
   [ '38', [(38, 61.73)] ],
   [ '39', [(39, 78.8)] ],
   [ '40', [(40, 109.17)] ],
   [ '41', [(41, 70.92)] ],
   [ '42', [(42, 59.12)] ],
   [ '43', [(43, 35.55)] ],
   [ '44', [(44, 72.04)] ],
   [ '45', [(45, 33.78)] ],
   [ '46', [(46, 49.51)] ],
   [ '47', [(47, 15.1)] ],
   [ '48', [(48, 270.68)] ],
   [ '49', [(49, 65.66)] ],
   [ '50', [(50, 53.83)] ],
   [ '51', [(51, 32.85)] ],
   [ '52', [(52, 26.41)] ],
   [ '53', [(53, 35.43)] ],
   [ '54', [(54, 104.19)] ],
   [ '55', [(55, 74.86)] ],
   [ '56', [(56, 213.15)] ],
   [ '57', [(57, 1507.65)] ],
   [ '58', [(58, 33.65)] ],
   [ '59', [(59, 616.32)] ],
   [ '60', [(60, 23.42)] ],
   [ '61', [(61, 122.69)] ],
   [ '62', [(62, 362.66)] ],
   [ '63', [(63, 82.74)] ],
   [ '64', [(64, 8.98)] ],
   [ '65', [(65, 13.85)] ],
   [ '66', [(66, 23.68)] ],
   [ '67', [(67, 42.38)] ],
   [ '68', [(68, 166.71)] ],
   [ '69', [(69, 166.36)] ],
   [ '70', [(70, 129.53)] ],
   [ '71', [(71, 41.37)] ],
   [ '72', [(72, 62.37)] ],
   [ '73', [(73, 49.91)] ],
   [ '74', [(74, 342.55)] ],
   [ '75', [(75, 49.04)] ],
   [ '76', [(76, 106.38)] ],
   [ '77', [(77, 131.01)] ],
   [ '78', [(78, 160.82)] ],
   [ '79', [(79, 33.65)] ],
   [ '80', [(80, 72.98)] ],
   [ '81', [(81, 43.82)] ],
   [ '82', [(82, 86.33)] ],
   [ '83', [(83, 14.45)] ],
   [ '84', [(84, 285.93)] ],
   [ '85', [(85, 87.54)] ],
   [ '86', [(86, 82.95)] ],
   [ '87', [(87, 326.16)] ],
   [ '88', [(88, 93.77)] ],
   [ '89', [(89, 218.77)] ],
   [ '90', [(90, 94.08)] ],
   [ '91', [(91, 121.96)] ],
   [ '92', [(92, 1186.9)] ],
   [ '93', [(93, 37.71)] ],
   [ '94', [(94, 659.39)] ],
   [ '95', [(95, 68.4)] ],
   [ '96', [(96, 21.96)] ],
   [ '97', [(97, 49.51)] ],
   [ '98', [(98, 50.74)] ],
   [ '99', [(99, 183.27)] ],
   [ '100', [(100, 321.96)] ],
]
chart = pygal.XY(style=LightColorizedStyle, show_legend=False)
chart.title = 'Top 100 Rated Items\' Prices in USD'
chart = add_data(chart, data)
chart.render_to_file('../top100_prices.svg')



data = [
   [ '1', [(1, 68.62)] ],
   [ '2', [(2, 99.2)] ],
   [ '3', [(3, 16.32)] ],
   [ '4', [(4, 33.79)] ],
   [ '5', [(5, 99.12)] ],
   [ '6', [(6, 52.53)] ],
   [ '7', [(7, 46.79)] ],
   [ '8', [(8, 28.59)] ],
   [ '9', [(9, 29.01)] ],
   [ '10', [(10, 29.01)] ],
   [ '11', [(11, 38.09)] ],
   [ '12', [(12, 166.71)] ],
   [ '13', [(13, 22.04)] ],
   [ '14', [(14, 161.22)] ],
   [ '15', [(15, 48.79)] ],
   [ '16', [(16, 99.12)] ],
   [ '17', [(17, 33.79)] ],
   [ '18', [(18, 171.44)] ],
   [ '19', [(19, 175.4)] ],
   [ '20', [(20, 57.79)] ],
   [ '21', [(21, 16.42)] ],
   [ '22', [(22, 59.4)] ],
   [ '23', [(23, 99.81)] ],
   [ '24', [(24, 130.67)] ],
   [ '25', [(25, 56.71)] ],
   [ '26', [(26, 85.36)] ],
   [ '27', [(27, 145.24)] ],
   [ '28', [(28, 210.34)] ],
   [ '29', [(29, 121.15)] ],
   [ '30', [(30, 98.91)] ],
   [ '31', [(31, 129.17)] ],
   [ '32', [(32, 59.33)] ],
   [ '33', [(33, 26.27)] ],
   [ '34', [(34, 59.5)] ],
   [ '35', [(35, 47.48)] ],
   [ '36', [(36, 63.93)] ],
   [ '37', [(37, 189.12)] ],
   [ '38', [(38, 61.73)] ],
   [ '39', [(39, 78.8)] ],
   [ '40', [(40, 109.17)] ],
   [ '41', [(41, 70.92)] ],
   [ '42', [(42, 59.12)] ],
   [ '43', [(43, 35.55)] ],
   [ '44', [(44, 72.04)] ],
   [ '45', [(45, 33.78)] ],
   [ '46', [(46, 49.51)] ],
   [ '47', [(47, 15.1)] ],
   [ '48', [(48, 270.68)] ],
   [ '49', [(49, 65.66)] ],
   [ '50', [(50, 53.83)] ],
   [ '51', [(51, 32.85)] ],
   [ '52', [(52, 26.41)] ],
   [ '53', [(53, 35.43)] ],
   [ '54', [(54, 104.19)] ],
   [ '55', [(55, 74.86)] ],
   [ '56', [(56, 213.15)] ],
   [ '58', [(58, 33.65)] ],
   [ '60', [(60, 23.42)] ],
   [ '61', [(61, 122.69)] ],
   [ '62', [(62, 362.66)] ],
   [ '63', [(63, 82.74)] ],
   [ '64', [(64, 8.98)] ],
   [ '65', [(65, 13.85)] ],
   [ '66', [(66, 23.68)] ],
   [ '67', [(67, 42.38)] ],
   [ '68', [(68, 166.71)] ],
   [ '69', [(69, 166.36)] ],
   [ '70', [(70, 129.53)] ],
   [ '71', [(71, 41.37)] ],
   [ '72', [(72, 62.37)] ],
   [ '73', [(73, 49.91)] ],
   [ '74', [(74, 342.55)] ],
   [ '75', [(75, 49.04)] ],
   [ '76', [(76, 106.38)] ],
   [ '77', [(77, 131.01)] ],
   [ '78', [(78, 160.82)] ],
   [ '79', [(79, 33.65)] ],
   [ '80', [(80, 72.98)] ],
   [ '81', [(81, 43.82)] ],
   [ '82', [(82, 86.33)] ],
   [ '83', [(83, 14.45)] ],
   [ '84', [(84, 285.93)] ],
   [ '85', [(85, 87.54)] ],
   [ '86', [(86, 82.95)] ],
   [ '87', [(87, 326.16)] ],
   [ '88', [(88, 93.77)] ],
   [ '89', [(89, 218.77)] ],
   [ '90', [(90, 94.08)] ],
   [ '91', [(91, 121.96)] ],
   [ '93', [(93, 37.71)] ],
   [ '95', [(95, 68.4)] ],
   [ '96', [(96, 21.96)] ],
   [ '97', [(97, 49.51)] ],
   [ '98', [(98, 50.74)] ],
   [ '99', [(99, 183.27)] ],
   [ '100', [(100, 321.96)] ],
]

chart = pygal.XY(style=LightColorizedStyle, show_legend=False)
chart.title = 'Top 100 Rated Items\' Prices in USD >$500 removed'
chart = add_data(chart, data)
chart.render_to_file('../top100_prices_removed_outliers.svg')


chart = pygal.Worldmap(style=LightColorizedStyle, show_legend=False)
chart.title = 'Silk Road Sellers By Country'
chart.add('Number of Sellers',{
  "us": 93,
  "de": 39,
  "ca": 32,
  "nl": 35,
  "se": 10,
  "dk": 2,
  "au": 45,
  "pl": 2,
  "gb": 40,
  "be": 4,
  "cn": 6,
  "ie": 2,
  "in": 1,
  "at": 1,
  "no": 2,
  "nz": 2,
  "za": 4,
  "ch": 1,
  "es": 2,
  "it": 2,
  "fr": 1,
  "fi": 1,
  "cz": 1,
  "sk": 1
})
chart.render_to_file('../sellers_by_country.svg');
